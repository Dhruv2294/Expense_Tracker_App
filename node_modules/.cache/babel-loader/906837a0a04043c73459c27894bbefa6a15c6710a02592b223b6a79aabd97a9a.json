{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Expense_Tracker_App\\\\src\\\\ExpenseChart.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport 'chartjs-plugin-annotation';\n\n// Register the components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst ExpenseChart = ({\n  expenses\n}) => {\n  // Define all months\n  const allMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  // Aggregate expenses by month\n  const monthlyData = expenses.reduce((acc, expense) => {\n    const date = new Date(expense.date);\n    const month = date.toLocaleString('default', {\n      month: 'long'\n    });\n    if (!acc[month]) {\n      acc[month] = 0;\n    }\n    acc[month] += expense.amount;\n    return acc;\n  }, {});\n\n  // Prepare data arrays for chart\n  const labels = allMonths; // Use all months\n  const dataValues = allMonths.map(month => monthlyData[month] || 0); // Map expenses or 0 if no data\n\n  const data = {\n    labels: labels,\n    datasets: [{\n      label: 'Monthly Expenses',\n      data: dataValues,\n      fill: true,\n      backgroundColor: 'rgba(75, 192, 192, 0.4)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 2,\n      pointRadius: 5,\n      pointHoverRadius: 7\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top',\n        labels: {\n          color: 'black',\n          font: {\n            size: 14\n          }\n        }\n      },\n      tooltip: {\n        enabled: true,\n        callbacks: {\n          label: function (tooltipItem) {\n            return `${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          }\n        }\n      },\n      annotation: {\n        annotations: {}\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Month',\n          color: 'black',\n          font: {\n            size: 16,\n            weight: 'bold'\n          }\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Total Amount',\n          color: 'black',\n          font: {\n            size: 16,\n            weight: 'bold'\n          }\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    animations: {\n      tension: {\n        duration: 0\n      }\n    }\n  };\n\n  // Adding upward arrows for each month that has expenses\n  allMonths.forEach((month, index) => {\n    if (monthlyData[month]) {\n      // Only add an arrow for months with expenses\n      options.plugins.annotation.annotations[`arrow-${month}`] = {\n        type: 'line',\n        yMin: 0,\n        yMax: monthlyData[month],\n        // Arrow points to the month's value\n        xMin: month,\n        xMax: month,\n        borderColor: 'red',\n        borderWidth: 2,\n        label: {\n          content: '↑',\n          // Upward arrow character\n          enabled: true,\n          position: 'top',\n          // Position above the line\n          backgroundColor: 'white'\n        }\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        marginBottom: '20px'\n      },\n      children: \"Monthly Expenses Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_c = ExpenseChart;\nexport default ExpenseChart;\nvar _c;\n$RefreshReg$(_c, \"ExpenseChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","jsxDEV","_jsxDEV","register","ExpenseChart","expenses","allMonths","monthlyData","reduce","acc","expense","date","Date","month","toLocaleString","amount","labels","dataValues","map","data","datasets","label","fill","backgroundColor","borderColor","borderWidth","pointRadius","pointHoverRadius","options","responsive","plugins","legend","display","position","color","font","size","tooltip","enabled","callbacks","tooltipItem","dataset","raw","annotation","annotations","scales","x","title","text","weight","grid","y","beginAtZero","animations","tension","duration","forEach","index","type","yMin","yMax","xMin","xMax","content","style","padding","children","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/OneDrive/Desktop/Expense_Tracker_App/src/ExpenseChart.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport 'chartjs-plugin-annotation';\n\n// Register the components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\n\nconst ExpenseChart = ({ expenses }) => {\n  // Define all months\n  const allMonths = [\n    'January', 'February', 'March', 'April', 'May', 'June', \n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  // Aggregate expenses by month\n  const monthlyData = expenses.reduce((acc, expense) => {\n    const date = new Date(expense.date);\n    const month = date.toLocaleString('default', { month: 'long' });\n    if (!acc[month]) {\n      acc[month] = 0;\n    }\n    acc[month] += expense.amount;\n    return acc;\n  }, {});\n\n  // Prepare data arrays for chart\n  const labels = allMonths; // Use all months\n  const dataValues = allMonths.map(month => monthlyData[month] || 0); // Map expenses or 0 if no data\n\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        label: 'Monthly Expenses',\n        data: dataValues,\n        fill: true,\n        backgroundColor: 'rgba(75, 192, 192, 0.4)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 2,\n        pointRadius: 5,\n        pointHoverRadius: 7,\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top',\n        labels: {\n          color: 'black',\n          font: {\n            size: 14,\n          },\n        },\n      },\n      tooltip: {\n        enabled: true,\n        callbacks: {\n          label: function(tooltipItem) {\n            return `${tooltipItem.dataset.label}: ${tooltipItem.raw}`;\n          },\n        },\n      },\n      annotation: {\n        annotations: {},\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Month',\n          color: 'black',\n          font: {\n            size: 16,\n            weight: 'bold',\n          },\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Total Amount',\n          color: 'black',\n          font: {\n            size: 16,\n            weight: 'bold',\n          },\n        },\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n      },\n    },\n    animations: {\n      tension: {\n        duration: 0,\n      },\n    },\n  };\n\n  // Adding upward arrows for each month that has expenses\n  allMonths.forEach((month, index) => {\n    if (monthlyData[month]) { // Only add an arrow for months with expenses\n      options.plugins.annotation.annotations[`arrow-${month}`] = {\n        type: 'line',\n        yMin: 0,\n        yMax: monthlyData[month], // Arrow points to the month's value\n        xMin: month,\n        xMax: month,\n        borderColor: 'red',\n        borderWidth: 2,\n        label: {\n          content: '↑', // Upward arrow character\n          enabled: true,\n          position: 'top', // Position above the line\n          backgroundColor: 'white',\n        },\n      };\n    }\n  });\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>Monthly Expenses Chart</h2>\n      <Line data={data} options={options} />\n    </div>\n  );\n};\n\nexport default ExpenseChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}